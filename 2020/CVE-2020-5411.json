{
  "configurations": [
    {
      "nodes": [
        {
          "cpeMatch": [
            {
              "criteria": "cpe:2.3:a:pivotal_software:spring_batch:*:*:*:*:*:*:*:*",
              "matchCriteriaId": "0C2186E7-AA7E-4AC8-827B-6DED44BD8E6F",
              "versionEndIncluding": "4.0.4",
              "versionStartIncluding": "4.0.0",
              "vulnerable": true
            },
            {
              "criteria": "cpe:2.3:a:pivotal_software:spring_batch:*:*:*:*:*:*:*:*",
              "matchCriteriaId": "7D4834A1-4C31-4B2B-8D70-50F5B6C68ED2",
              "versionEndIncluding": "4.1.4",
              "versionStartIncluding": "4.1.0",
              "vulnerable": true
            },
            {
              "criteria": "cpe:2.3:a:pivotal_software:spring_batch:*:*:*:*:*:*:*:*",
              "matchCriteriaId": "E1E52F78-2EA9-47C2-9B7A-00859082B046",
              "versionEndIncluding": "4.2.2",
              "versionStartIncluding": "4.2.0",
              "vulnerable": true
            }
          ],
          "negate": false,
          "operator": "OR"
        }
      ]
    }
  ],
  "cveTags": [],
  "descriptions": [
    {
      "lang": "en",
      "value": "When configured to enable default typing, Jackson contained a deserialization vulnerability that could lead to arbitrary code execution. Jackson fixed this vulnerability by blacklisting known \"deserialization gadgets\". Spring Batch configures Jackson with global default typing enabled which means that through the previous exploit, arbitrary code could be executed if all of the following is true: * Spring Batch's Jackson support is being leveraged to serialize a job's ExecutionContext. * A malicious user gains write access to the data store used by the JobRepository (where the data to be deserialized is stored). In order to protect against this type of attack, Jackson prevents a set of untrusted gadget classes from being deserialized. Spring Batch should be proactive against blocking unknown \"deserialization gadgets\" when enabling default typing."
    },
    {
      "lang": "es",
      "value": "Cuando se configuró para habilitar la escritura predeterminada, Jackson contenía una vulnerabilidad de deserialización que podría conllevar a una ejecución de código arbitraria. Jackson corrigió esta vulnerabilidad al incluir en la lista negra los \"deserialization gadgets\" conocidos. Spring Batch configura Jackson con la escritura predeterminada global habilitada, lo que significa que por medio de una explotación previa, se podría ejecutar un código arbitrario si se cumple todo lo siguiente: * El soporte Jackson de Spring Batch se está siendo aprovechado para serializar un ExecutionContext de trabajo. * Un usuario malicioso consigue acceso de escritura al almacén de datos usado por JobRepository (donde se almacenan los datos que son deserializados). A fin de protegerse contra este tipo de ataque, Jackson evita que se deserialice un conjunto de clases de gadget no confiables. Spring Batch debe ser proactivo contra el bloqueo de \"deserialization gadgets\" desconocidos cuando se habilita una escritura predeterminada"
    }
  ],
  "id": "CVE-2020-5411",
  "lastModified": "2020-08-07T17:16:00.043",
  "metrics": {
    "cvssMetricV2": [
      {
        "acInsufInfo": false,
        "baseSeverity": "MEDIUM",
        "cvssData": {
          "accessComplexity": "MEDIUM",
          "accessVector": "NETWORK",
          "authentication": "NONE",
          "availabilityImpact": "PARTIAL",
          "baseScore": 6.8,
          "confidentialityImpact": "PARTIAL",
          "integrityImpact": "PARTIAL",
          "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
          "version": "2.0"
        },
        "exploitabilityScore": 8.6,
        "impactScore": 6.4,
        "obtainAllPrivilege": false,
        "obtainOtherPrivilege": false,
        "obtainUserPrivilege": false,
        "source": "nvd@nist.gov",
        "type": "Primary",
        "userInteractionRequired": false
      }
    ],
    "cvssMetricV31": [
      {
        "cvssData": {
          "attackComplexity": "HIGH",
          "attackVector": "NETWORK",
          "availabilityImpact": "HIGH",
          "baseScore": 8.1,
          "baseSeverity": "HIGH",
          "confidentialityImpact": "HIGH",
          "integrityImpact": "HIGH",
          "privilegesRequired": "NONE",
          "scope": "UNCHANGED",
          "userInteraction": "NONE",
          "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
          "version": "3.1"
        },
        "exploitabilityScore": 2.2,
        "impactScore": 5.9,
        "source": "nvd@nist.gov",
        "type": "Primary"
      }
    ]
  },
  "published": "2020-06-11T17:15:12.410",
  "references": [
    {
      "source": "security@pivotal.io",
      "tags": [
        "Vendor Advisory"
      ],
      "url": "https://tanzu.vmware.com/security/cve-2020-5411"
    }
  ],
  "sourceIdentifier": "security@pivotal.io",
  "vulnStatus": "Analyzed",
  "weaknesses": [
    {
      "description": [
        {
          "lang": "en",
          "value": "CWE-502"
        }
      ],
      "source": "nvd@nist.gov",
      "type": "Primary"
    },
    {
      "description": [
        {
          "lang": "en",
          "value": "CWE-502"
        }
      ],
      "source": "security@pivotal.io",
      "type": "Secondary"
    }
  ]
}