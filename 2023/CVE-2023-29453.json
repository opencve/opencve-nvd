{
  "configurations": [
    {
      "nodes": [
        {
          "cpeMatch": [
            {
              "criteria": "cpe:2.3:a:zabbix:zabbix-agent2:*:*:*:*:*:*:*:*",
              "matchCriteriaId": "2950ACED-D8E9-456D-AEBF-5E5E145A6B82",
              "versionEndExcluding": "5.0.35",
              "versionStartIncluding": "5.0.0",
              "vulnerable": true
            },
            {
              "criteria": "cpe:2.3:a:zabbix:zabbix-agent2:*:*:*:*:*:*:*:*",
              "matchCriteriaId": "EDA29820-0B03-4566-BB94-AC420CE44CBB",
              "versionEndExcluding": "6.0.18",
              "versionStartIncluding": "6.0.0",
              "vulnerable": true
            },
            {
              "criteria": "cpe:2.3:a:zabbix:zabbix-agent2:*:*:*:*:*:*:*:*",
              "matchCriteriaId": "CE6BD8DF-5ACA-4B40-BA17-05C8E398B503",
              "versionEndExcluding": "6.4.3",
              "versionStartIncluding": "6.4.0",
              "vulnerable": true
            }
          ],
          "negate": false,
          "operator": "OR"
        }
      ]
    }
  ],
  "cveTags": [],
  "descriptions": [
    {
      "lang": "en",
      "value": "Templates do not properly consider backticks (`) as Javascript string delimiters, and do not escape them as expected. Backticks are used, since ES6, for JS template literals. If a template contains a Go template action within a Javascript template literal, the contents of the action can be used to terminate the literal, injecting arbitrary Javascript code into the Go template. As ES6 template literals are rather complex, and themselves can do string interpolation, the decision was made to simply disallow Go template actions from being used inside of them (e.g., \"var a = {{.}}\"), since there is no obviously safe way to allow this behavior. This takes the same approach as github.com/google/safehtml. With fix, Template. Parse returns an Error when it encounters templates like this, with an ErrorCode of value 12. This ErrorCode is currently unexported but will be exported in the release of Go 1.21. Users who rely on the previous behavior can re-enable it using the GODEBUG flag jstmpllitinterp=1, with the caveat that backticks will now be escaped. This should be used with caution."
    },
    {
      "lang": "es",
      "value": "Las plantillas no consideran correctamente las comillas invertidas (`) como delimitadores de cadenas de Javascript y no las escapan como se esperaba. Las comillas invertidas se utilizan, desde ES6, para los literales de plantillas JS. Si una plantilla contiene una acción de plantilla Go dentro de un literal de plantilla Javascript, el contenido de la acción se puede usar para terminar el literal, inyectando código Javascript arbitrario en la plantilla Go. Como los literales de plantilla de ES6 son bastante complejos y ellos mismos pueden hacer interpolación de cadenas, se tomó la decisión de simplemente no permitir que se utilicen acciones de plantilla de Go dentro de ellos (por ejemplo, \"var a = {{.}}\"), ya que no hay forma obviamente segura de permitir este comportamiento. Esto adopta el mismo enfoque que github.com/google/safehtml. Con arreglo, Plantilla. Parse devuelve un error cuando encuentra plantillas como esta, con un código de error de valor 12. Este código de error no se ha exportado actualmente, pero se exportará en la versión de Go 1.21. Los usuarios que confían en el comportamiento anterior pueden volver a habilitarlo usando el indicador GODEBUG jstmpllitinterp=1, con la advertencia de que ahora se escaparán las comillas invertidas. Esto debe usarse con precaución."
    }
  ],
  "id": "CVE-2023-29453",
  "lastModified": "2023-10-24T14:50:55.717",
  "metrics": {
    "cvssMetricV31": [
      {
        "cvssData": {
          "attackComplexity": "LOW",
          "attackVector": "NETWORK",
          "availabilityImpact": "HIGH",
          "baseScore": 9.8,
          "baseSeverity": "CRITICAL",
          "confidentialityImpact": "HIGH",
          "integrityImpact": "HIGH",
          "privilegesRequired": "NONE",
          "scope": "UNCHANGED",
          "userInteraction": "NONE",
          "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
          "version": "3.1"
        },
        "exploitabilityScore": 3.9,
        "impactScore": 5.9,
        "source": "nvd@nist.gov",
        "type": "Primary"
      },
      {
        "cvssData": {
          "attackComplexity": "LOW",
          "attackVector": "NETWORK",
          "availabilityImpact": "HIGH",
          "baseScore": 9.8,
          "baseSeverity": "CRITICAL",
          "confidentialityImpact": "HIGH",
          "integrityImpact": "HIGH",
          "privilegesRequired": "NONE",
          "scope": "UNCHANGED",
          "userInteraction": "NONE",
          "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
          "version": "3.1"
        },
        "exploitabilityScore": 3.9,
        "impactScore": 5.9,
        "source": "security@zabbix.com",
        "type": "Secondary"
      }
    ]
  },
  "published": "2023-10-12T06:15:13.077",
  "references": [
    {
      "source": "security@zabbix.com",
      "tags": [
        "Vendor Advisory"
      ],
      "url": "https://support.zabbix.com/browse/ZBX-23388"
    }
  ],
  "sourceIdentifier": "security@zabbix.com",
  "vulnStatus": "Analyzed",
  "weaknesses": [
    {
      "description": [
        {
          "lang": "en",
          "value": "CWE-94"
        }
      ],
      "source": "nvd@nist.gov",
      "type": "Primary"
    },
    {
      "description": [
        {
          "lang": "en",
          "value": "CWE-94"
        }
      ],
      "source": "security@zabbix.com",
      "type": "Secondary"
    }
  ]
}